############################ System description ############################
SystemName    MoS2 Monolayer                                                        # Descriptive name of the system {default = "blank"}
SystemLabel    MoS2                                    # Label for naming output files {default = siesta}

############################ Material description ############################
NumberOfSpecies                    2                    # Number of different atomic species {MANDATORY}
NumberOfAtoms                     60                    # Number of atoms in the simulation {MANDATORY}


%block ChemicalSpeciesLabel                            # Specify the different chemical species: index, atomic number (Z), label {MANDATORY}
1         42         Mo
2         16         S
%endblock ChemicalSpeciesLabel


%block AtomicMass                                     # Specify the species atomic massess: index, atomic mass (m_a [Da]) {default = natural masses}
    1          95.95
    2          32.06
%endblock AtomicMass

%block Geometry.Constraints
     cell-vector C
%endblock Geometry.Constraints
############################ k-point sampling ############################
%block kgrid_Monkhorst_Pack							# Construct the Monkhorst-Pack k-point sampling matrix when using diagon solution method
	9   0   0   0.0
	0   5   0   0.0
	0   0   1   0.0
%endblock kgrid_Monkhorst_Pack

kgrid_cutoff        			0 Bohr 				# k-grid cutoff {default = 0 Bohr}
ChangeKgridInMD					false 				# Recompute k-point grid at every iteration during MD runs that potentially change the unit : Parrinello-Rahman, Nose-Parrinello-Rahman, and Anneal {default = false}
TimeReversalSymmetryForKpoints  true 				# Impose time-reversal symmetry (k=-k)


############################ Real-space grid and the eggbox effect ############################ 
MeshCutoff                      400 Ry              # The plane wave cutoff for the grid {default = 300 Ry}
Mesh.SubDivisions 				4 					# Number of sub-mesh points in each direction used to save index storage on the mesh {default = 2}


############################ Occupation of electronic states and E_F ############################ 
OccupationFunction              FD                  # Electronic occupation function (FD, MP) {default = FD}
ElectronicTemperature           5 K               # Electronic temperature T_e of the distribution {default = 300 K}


############################ Pseudo-atomic orbitals basis ############################
PAO.BasisSize                   DZP           # Basis size (# of orbitals/atom) (SZ, DZ, SZP, DZP) {default = DZP}

PAO.EnergyShift					0.02 Ry 			# Range of first zeta (energy shift deltaE to determine ALL cutoff radii r_c's of each orbital) {default = 0.02 Ry = 272.114 meV}

PAO.BasisType					split 				# Second zeta type (split, splitgauss, nodes, nonodes, filteret) {default = split}
PAO.SplitNorm 					0.15				# Range of second zeta (matching radius r_m) {default = 0.15}

PAO.SoftDefault 				false           	# Confinement option {default = false}
PAO.SoftInnerRadius 			0.9					# Inner radius for soft confinement (r_i) {default = 0.9}
PAO.SoftPotential 				40 Ry 				# Prefactor for soft confinement (V_0) {default = 40 Ry}


############################ XC functional ############################
XC.Functional                   GGA                 # E_{XC} type (LDA, GGA, VDW) {default = LDA}
XC.Authors                      PBE                 # Particular parametrization of E_{XC} {default = PZ}


############################ Spin polarization ############################
Spin							non-polarized 		    # Inclusion of spin (non-polarized, polarized, non-collinear, spin-orbit) {default = non-polarized}
Spin.Fix						false				# Fixed spin values as defined by Spin.Total for collinear spin {default = false}
Spin.Total						0.0					# Value of the imposed total spin polarization of the system (in units of 1/2) {default = 0.0}
SingleExcitation				false		    	# Calculate a rough approximation to the lowest excited state {default = false}

DM.InitSpin.AF 					false 				# Define the initial spin density for a spin polarized calculation {default = false}


############################ Density matrix  ############################
DM.AllowReuse 					true 				# Reuse the density matrix from previous geometry iterations to start the new geometry's SCF cycle {default = true}

DM.AllowExtrapolation 			true 				# Extrapolate the density matrix from previous geometry iterations to start the new geometry's SCF cycle {default = true}
DM.History.Depth 				1					# Set the number of geometry steps for which the density matrix is saved for extrapolation {default = 1}

DM.Init.Unfold 					true 				# Unfold the Gamma-only density matrix to the auxiliary 1x10 elements {default = true}


############################ Self-consistent field (SCF) ############################
Harris.functional				false				# Use non self-consistent Harris functional, otherwise use the fully self-consistent KS functional {default = false}

MinSCFIterations                0           # Minimum number of SCF iterations per time step {default = 0}
MaxSCFIterations                10000           # Maximum number of SCF iterations per time step {default = 1000}
SCF.MustConverge                false 				# Stop if convergences is not rechaed in the maximum number of SCF iterations {default = true}

SCF.Mix							Hamiltonian 		# Mixed physical quantity (Hamiltonian, density, charge) {default = Hamiltonian}
SCF.Mix.Spin 					all					# Mixing in spin-polarized calculations (all, spinor, sum, sum+diff) {default = all}
SCF.Mixer.Method                Pulay           # Mixing algorithm (Linear, Pulay, Broyden) {default = Linear}
SCF.Mixer.Variant               original          # Variant of the mixing method (original, GR) {default = original}
SCF.Mixer.Weight                0.1                 # Mixing weight {default = 0.25}
SCF.Mixer.History				4				# Number of previous SCF steps used in estimating the following input {default = 2}

SCF.Pulay.UseSVD                true                # Use the more robust SVD algorithm instead of direct matrix inversion to perform the DIIS extrapolation {default = false}

SCF.Mix.First					true 				# Mix at first step {default = true}
SCF.Mix.First.Force 			false 				# Force mixing at first step, regardless of what SIESTA decides {default = false} 
SCF.Mix.AfterConvergence  		false 				# Mix at last SCF cycle, i.e.after convergence has been achieved {default = false}
SCF.RecomputeHAfterSCF  		false 				# Update the Hamiltonian matrix after the SCF cycle while computing energy, forces, and stresses {default = false}

SCF.Mixer.Kick 					50 					# After this number of steps, insert a linear mix to "kick" the SCF cycle out of possible local minimum {default = 0} 
SCF.Mixer.Kick.Weight           0.1           # The mixing weight for the linear kick (if used)

SCF.Mixer.Restart				0				# For advanced mixers (Pulay and Broyden), the mixing scheme may periodically restart the history {default = 0}
SCF.Mixer.Restart.Save          0          # When restarting the history of saved SCF steps, one may choose to save a subset of the latest history steps {deault = 0}

SCF.Mixer.Linear.After          -1                  # After reaching convergence, one may run additional SCF cycles using a linear mixing scheme if value >=0 {default = -1}
SCF.Mixer.Linear.After.Weight 	0					# The mixing weight for the linear mixing scheme of SCF.Mixer.Linear.After (if used)

SCF.DM.Converge                 true                # Use the density matrix elements as monitor of self-consistency {default = true}
SCF.DM.Tolerance                1e-5                # Tolerance of the density matrix {default = 10-4}
DM.Normalization.Tolerance 		1e-5				# Tolerance for unnormalized density matrices (typically product of PEXSI and similar) {default = 1e-5}

SCF.H.Converge                  true                # Use the Hamiltonian matrix elements as monitor of self-consistency {default = true}
SCF.H.Tolerance                 1e-4 eV             # Tolerance of the Hamiltonian matrix {default = 10-3 eV}

SCF.EDM.Converge                true                # Use the energy density matrix elements as monitor of self-consistency {default = true}
SCF.EDM.Tolerance               1e-4 eV             # Tolerance of the energy density matrix {default = 10-3 eV}

SCF.FreeE.Converge 				false  				# Use the total free energy as monitor of self-consistency {default = false}
SCF.FreeE.Tolerance 			1e-4 eV 			# Tolerance of the total free energy {default = 10-4 eV}

SCF.Harris.Converge				false  				# Use the Harris energy as monitor of self-consistency {default = false}
SCF.Harris.Tolerance 			1e-4 eV				# Tolerance of the Harris energy {default = 10-4 eV}


############################ Structural relaxation ############################ 
MD.TypeOfRun					CG 					# Specify the MD type of run (CG, Broyden, FIRE, Verlet, Nose, ParrinelloRahman, NoseParrinelloRahman, Anneal, FC, Master|Forces, Lua) {default = CG}
MD.Steps                        0                 # Maximum number of steps in a minimization routine {default = 0} 
MD.MaxDispl                     0.05 Bohr         # Maximum atomic displacement in an optimization step {default = 0.2 Bohr ~ 0.1 Ang} 

MD.VariableCell                 false                # Relax unit  + atomic coordinates when using CG, Broyden, or FIRE {default = false} 
MD.PreconditionVariableCell 	5 Ang 				# A length to multiply to the strain components in a variable- optimization {default = 5 Ang}
Constant.Volume 				false 				# Keep V_cell = constant in a variable- relaxation, and vary the shape & atomic coordinates only when using CG, Broyden, or FIRE {default = false}
Target.Pressure                 0 GPa         # Target pressure for variable- optimizations, Parrinello-Rahman method, and annealing options {default = 0 GPa} 

MD.RelaxCellOnly 				false 				# Relax unit  only when using Broyden or FIRE {default = false}

MD.MaxForceTol                  0.01 eV/Ang         # Force tolerance in coordinate optimization {default = 0.04 eV/Ang}
MD.MaxStressTol                 0.1 GPa         # Stress toerance in variable- CG optimization {default = 1 GPa}


############################ Solution method ############################ 
SolutionMethod					diagon 				# Specify the solution method (diagon, OMM, OrderN, transiesta, PEXSI) {default = diagon}

# diagon options
Diag.Algorithm					divide-and-Conquer  # Specify the algorithm when calculating the eigenvalues and/or eigenvectors (divide-and-Conquer, divide-and-Conquer-2stage, MRRR, MRRR-2stage, expert, expert-2stage, noexpert|QR, noexpert-2stage|QR-2stage, ELPA-1stage, ELPA|ELPA-2stage) {default = divide-and-Conquer}
Diag.ParallelOverK				false 				# Parallelise over the k-points and not the orbitals {default = false}
Diag.AbsTol 					1e-16				# Tolerance for the orthogonality of the eigenvectors for MRRR algorithm "for serial solver" or expert algorithm "for serial/parallel solver" {default = 1e-16}
DiagOrFac 						1e-3				# Re-orthoganalization factor to determine when the eigenvectors should be re-orthogonalized for expert algorithm "for serial/parallel solver" {default = 1e-3}
Diag.Memory 					1					# Allows user to increase the memory available to achieve successful diagnolization {default = 1}
Diag.UpperLower 				Lower 				# Select which part of the symmetric triangular part should be used in the solvers (Lower, Upper)

# Parallel options 
#ProcessorY						6					# Specify the dimension of the processor grid in the y-direction {default = 6}                      
#BlockSize						1					# Specify the number of consectuive orbitals which are lockated on a goven processor before moving to the next one {default = 1}

# Efficiency options
DirectPhi 					    true 				# Calculate the orbital values on the fly (rather than storing and using) {default = false}
SaveMemory 						false 				# Control whether the program uses algorithm which save memory at the expense of CPU time by not preserving the contents of arrays {default = false}
#NumberOfEigenStates				18					# Specify the number of eigenstates that are calculated from the maximum possible {default = all orbitals}


############################ Bandstructure analysis ############################
BandLinesScale    ReciprocalLatticeVectors  		# Scale of the kcell-vectors given in BandLines and BandPoints (pi/a, ReciprocalLatticeVectors)

%block BandLines 									# Specify the lines along which band energies are calculated
		1  	    0.0000  0.0000  0.0000      \Gamma
		100  	0.5000  0.0000  0.0000  	X
	        10 	0.5000  0.5000  0.0000  	S
		100  	0.0000  0.5000  0.0000  	Y
	        10  	0.0000  0.0000  0.0000  	\Gamma						
%endblock BandLines

############################ Wavefunction analysis ############################
#WaveFuncKPointsScale    ReciprocalLatticeVectors    # Scale of the kcell-vectors given in WaveFuncKPoints (pi/a, ReciprocalLatticeVectors)

#%block 	WaveFuncKPoints 							# Specify the k-points for which electronic wave function coefficients are written
#		0.0000  0.0000  0.0000 from 138 to 223       				
#		0.5000  0.5000  0.0000 from 138 to 223  		
#		0.5000  0.0000  0.0000 from 138 to 223  
#		0.0000  0.5000  0.0000 from 138 to 223  					
#%endblock WaveFuncKPoints

#WFS.Band.Min                                    138                                   # Specify the lowest band index of the wave functions for each k-point
#WFS.Band.Max                                    223                                   # Specify the highest band index of the wave functions for each k-point
#WFS.Energy.Min                                  -6.0 eV                                      # Specify the lowest band energy
#WFS.Energy.Max                                  2.0 eV                                    # Specify the highest band energy

# PDOS BLOCK 1

# PDOS BLOCK 2

# LDOS BLOCK

# I/O BLOCK

############################ I/O ############################
# Reading from files
UseStructFile					true				# Read the lattice structure information from SystemLabel.STRUCT_IN structure file {default = false}
MD.UseSaveCG					true 				# Read the CG history information stored in SystemLabel.CG {deefault = false}
MD.UseSaveXV					false 				# Read the XV history information stored in SystemLabel.XV {default = false}
ON.UseSaveLWF 					false 				# Read the LWF history information stored in SystemLabel.LWF {default = false}

DM.UseSaveDM 					true				# Read the density matrix information stored in SystemLabel.DM  {default = false}
DM.FormattedFiles 				false 				# Instructs to use formatted files for reaing and writing the density matrix {default = false}
DM.FormattedInput  				false 				# Instructs to use formatted files for reading the density matrix {default = false}
DM.FormattedOutput 				false 				# Instructs to use formatted files for writing the density matrix {default = false}

# DM and H matrices
Write.DM 						true 				# Write the density matrix into SystemLabel.DM {default = true}
Write.DM.end.of.cycle 			true 				# Write the denisty matrix only at the end of each SCF step {default = true}

Write.H 						false 				# Write the Hamiltonian matrix into SystemLabel.H {default = false}
Write.H.end.of.cycle 			false 				# Write the Hamiltonian matrix only at the end of each SCF step {default = false}

Use.Blocked.WriteMat 			false 				# Use blocks of orbitals to speed up the I/O of the sparse-matrix {default = false}

# General
WriteForces						false				# Write the atomic forces at every MD step or relaxation step into the output file siste.out {default = false}
WriteKpoints					true				# Write the coordinates of the kcell-vectors used in the grid for k-sampling into the output file siste.out {default = false}
WriteCoorInitial				true				# Write the initial coordinates into the output file siste.out {default = false}
WriteCoorStep					false 				# Write the coordinates at every MD step or relaxation step into the output file siste.out {default = false}
WriteEigenvalues				false				# Write the Hamiltonian eigenvalues for the sampling k-points into the output file siste.out {default = false}

# Charge density
SaveInitialChargeDensity		false				# Write the charge density information stored in SystemLabel.RHOINIT {default = false} 
SaveRho 						false 				# Write the valence pseudocharge density into SystemLabel.RHO {default = false}	
SaveDeltaRho  					false				# Write the deformation valence pseudocharge density into SystemLabel.DRHO {default = false}
SaveRhoXC  						false				# Write the valence pseudocharge density + nonlocal core corrections into SystemLabel.RHOXC {default = false}
SaveIonicCharge 				false				# Write the soft diffuse ionic charge density into SystemLabel.IOCH {default = false}
SaveTotalCharge 				false				# Write the total charge density into SystemLabel.TOCH {default = false}
SaveBaderCharge					false				# Write the Bader charge density into SystemLabel.BADER {default = false}

# Potential
SaveElectrostaticPotential		false				# Write the total potential into SystemLabel.VH {default = false}
SaveNeutralAtomPotential		false				# Write the neutral-atom potential into SystemLabel.VNA {default = false}
SaveTotalPotential				false				# Write the total effective potential into SystemLabel.VT {default = false}

# Bands
WriteKbands						true				# Write the coordinates of the kcell-vectors defined for band plotting into siesta.out {default = false}
WriteBands  					true                # Write the Hamiltonian eigenvalues corresponding to the kcell-vectors defined for band plotting into siesta.out {default = false}
WFS.Write.For.Bands 			true                # Write the wave functions associated to the bands specified by BandLines or a BandPoints into SystemLabel.WFSX {default = false}

# Wavefunctions/orbitals
WriteWaveFunctions				true				# Write the selected wavefunctions information into SystemLabel.selected.WFSX {default = false}
WriteOrbitalIndex				true 				# Write the orbitals used in the calculations into SystemLabel.ORB_INDX {default = false}

# Other
LongOutput						false				# Write the long output (k-points, bands, coordinates, forces, eigenvalues, wavefunctions, and Mulliken population) {default = false}

WriteDenchar					false				# Write information needed by Util/Denchar {default = false}
COOP.Write 						false				# Write the information needed by Util/COOP/mprop {default = false}

WriteCoorXmol					true				# Write the final atomic coordinates [A] into SystemLabel.XYZ {default = false}
WriteCoorCerius 				false				# Write the final atomic coordiantes in fractional format into SystemLabel.XTL {default = false}

WriteMDHistory					false				# Write the molecular dynamics trajectory into SystemLabel.MD {default = false}
WriteMDXMol						false				# Write the atomic coordinates [A] of every MD step for animation into SystemLabel.ANI {default = false}

SaveHS 							false				# Write the number of spin components, orbitals, as well as Hamiltonian and overlap matrices into SystemLabel.HSX {default = false}

SpinInSCF						false 				# Write the size and components of the total spin polarization at every SCF step into siesta.out {default = true}

# Charge populations 
WriteMullikenPop 				0					# Determine the level of Mulliken population analysis printed (0, 1, 2, 3) {default = 0}
MullikenInSCF					false				# Write the Mulliken populations for every SCF step at level specified in WriteMullikenPop into siesta.out {default = false}

WriteHirshfeldPop				false				# Write the Hirshfeld "net" atomic populations on each atom in the system after the last step of SCF into siesta.out {default = false}

WriteVoronoiPop 				false 				# Write the Voronoi "net" atomic populations on each atom in the system after the last step of SCF into siesta.out {default = false} 

PartialChargesAtEveryGeometry   false 				# Write the Hirshfeld and Voronoi populations after each SCF is achieved, for all geometry steps, into siesta.out {default = false}
PartialChargesAtEverySCFStep    false 				# Write the Hirshfeld and Voronoi populations for each SCF step into siesta.out {default = false}

# Memory & CPU time
AllocReportLevel 				0 					# Set the level of the allocation report {default = 0}
